// lib/strava.js
// Biblioth√®que de fonctions pour l'API Strava avec fetch natif

/**
 * R√©cup√®re un access token valide √† partir du refresh token
 */
export async function getAccessToken() {
  const clientId = process.env.STRAVA_CLIENT_ID;
  const clientSecret = process.env.STRAVA_CLIENT_SECRET;
  const refreshToken = process.env.STRAVA_REFRESH_TOKEN;

  if (!clientId || !clientSecret || !refreshToken) {
    throw new Error("Variables d'environnement manquantes pour l'API Strava");
  }

  try {
    // Utiliser le format application/x-www-form-urlencoded au lieu de JSON
    const formData = new URLSearchParams();
    formData.append("client_id", clientId);
    formData.append("client_secret", clientSecret);
    formData.append("refresh_token", refreshToken);
    formData.append("grant_type", "refresh_token");

    const response = await fetch("https://www.strava.com/oauth/token", {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body: formData.toString(),
    });

    if (!response.ok) {
      const errorText = await response.text();
      let errorMessage = `Erreur API Strava (${response.status}): ${response.statusText}`;

      try {
        // Essayer de parser le message d'erreur comme JSON
        const errorData = JSON.parse(errorText);
        if (errorData.message) {
          errorMessage = `Erreur API Strava: ${errorData.message}`;
        }
      } catch (e) {
        // Si ce n'est pas du JSON, utiliser le texte brut
        if (errorText) {
          errorMessage = `Erreur API Strava: ${errorText}`;
        }
      }

      throw new Error(errorMessage);
    }

    return await response.json();
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration du token:", error);
    throw error;
  }
}

/**
 * R√©cup√®re les activit√©s r√©centes de l'athl√®te
 * @param {string} accessToken - Token d'acc√®s valide
 * @param {number} count - Nombre d'activit√©s √† r√©cup√©rer (par d√©faut: 1)
 */
export async function getRecentActivities(accessToken, count = 1) {
  try {
    const response = await fetch(
      `https://www.strava.com/api/v3/athlete/activities?per_page=${count}`,
      {
        headers: { Authorization: `Bearer ${accessToken}` },
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(
        `Erreur API Strava: ${errorData.message || response.statusText}`
      );
    }

    return await response.json();
  } catch (error) {
    console.error(
      "Erreur lors de la r√©cup√©ration des activit√©s:",
      error.message
    );
    throw error;
  }
}

/**
 * R√©cup√®re les segments (laps) d'une activit√© sp√©cifique
 */
export async function getActivityLaps(accessToken, activityId) {
  try {
    const response = await fetch(
      `https://www.strava.com/api/v3/activities/${activityId}/laps`,
      {
        headers: { Authorization: `Bearer ${accessToken}` },
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(
        `Erreur API Strava: ${errorData.message || response.statusText}`
      );
    }

    return await response.json();
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des laps:", error.message);
    throw error;
  }
}

/**
 * D√©termine si l'activit√© doit √™tre analys√©e (fractionn√© vs endurance)
 */
export function shouldProcessActivity(activity) {
  // Ignorer les activit√©s d'endurance
  if (activity.name.toLowerCase().includes("endurance")) {
    return false;
  }

  // V√©rifier si c'est un fractionn√© (motifs comme "5x4", "4x800", etc.)
  const intervalPattern = /\d+\s*[xX]\s*\d+/;
  return intervalPattern.test(activity.name);
}

/**
 * G√©n√®re une description d√©taill√©e de la s√©ance de fractionn√©
 */
// lib/strava.js - Fonction corrig√©e pour le comptage des laps

/**
 * G√©n√®re une description d√©taill√©e de la s√©ance de fractionn√©
 * avec correction du comptage des laps
 */
export function generateWorkoutDescription(activity, laps) {
  // Extraire le format du fractionn√© du nom (ex: "5x4")
  const formatMatch = activity.name.match(/(\d+)\s*[xX]\s*\d+/);

  if (!formatMatch) {
    return activity.description || "";
  }

  const numIntervals = parseInt(formatMatch[1]);
  const intervalLength = formatMatch[2] || "";

  // Construire l'en-t√™te de la description
  let description = activity.description || "";
  description += description ? "\n\n" : "";

  // Ajouter l'√©chauffement (premier lap) s'il existe
  if (laps.length > 0) {
    const warmupLap = laps[0];

    // Calculer l'allure pour l'√©chauffement
    const warmupPaceSeconds =
      warmupLap.average_speed > 0 ? 1000 / warmupLap.average_speed : 0;

    const warmupPaceMinutes = Math.floor(warmupPaceSeconds / 60);
    const warmupPaceRemainingSeconds = Math.floor(warmupPaceSeconds % 60);
    const warmupPaceFormatted = `${warmupPaceMinutes}:${warmupPaceRemainingSeconds
      .toString()
      .padStart(2, "0")}`;

    // Calculer la distance en km
    const warmupDistanceKm = (warmupLap.distance / 1000).toFixed(2);

    // Ajouter l'√©chauffement √† la description
    description += `üî• √âCHAUFFEMENT: ${warmupDistanceKm} km @ ${warmupPaceFormatted}/km\n\n`;
  }

  // Identifier les laps actifs (fractionn√©s) vs r√©cup√©ration
  const relevantLaps = laps.slice(1, -1);
  const workLaps = [];

  // Filtrer uniquement les laps de travail (intervalles pairs dans la s√©quence)
  for (
    let i = 0;
    i < relevantLaps.length && workLaps.length < numIntervals;
    i += 2
  ) {
    if (i < relevantLaps.length) {
      workLaps.push(relevantLaps[i]);
    }
  }

  // Ajouter les d√©tails de chaque intervalle d'effort
  description += "üèÉ INTERVALLES:\n";

  workLaps.forEach((lap, index) => {
    // Calculer l'allure au km (min:sec/km)
    const paceSeconds = lap.average_speed > 0 ? 1000 / lap.average_speed : 0;

    const paceMinutes = Math.floor(paceSeconds / 60);
    const paceRemainingSeconds = Math.floor(paceSeconds % 60);
    const paceFormatted = `${paceMinutes}:${paceRemainingSeconds
      .toString()
      .padStart(2, "0")}`;

    // Formater la fr√©quence cardiaque
    const heartRate = lap.average_heartrate
      ? Math.round(lap.average_heartrate)
      : "N/A";

    description += `#${index + 1}: ${paceFormatted}/km  @${heartRate} bpm\n`;
  });

  // Calculer les moyennes globales
  const avgSpeed =
    workLaps.reduce((sum, lap) => sum + lap.average_speed, 0) / workLaps.length;
  const avgPaceSeconds = avgSpeed > 0 ? 1000 / avgSpeed : 0;
  const avgPaceMinutes = Math.floor(avgPaceSeconds / 60);
  const avgPaceRemainingSeconds = Math.floor(avgPaceSeconds % 60);
  const avgPaceFormatted = `${avgPaceMinutes}:${avgPaceRemainingSeconds
    .toString()
    .padStart(2, "0")}`;

  const avgHeartRate =
    workLaps.reduce((sum, lap) => sum + (lap.average_heartrate || 0), 0) /
    workLaps.length;
  const avgHeartRateFormatted = Math.round(avgHeartRate);

  description += `\nüìà MOYENNE: ${avgPaceFormatted}/km @${avgHeartRateFormatted} bpm`;

  return description;
}

/**
 * Met √† jour la description d'une activit√©
 */
export async function updateActivityDescription(
  accessToken,
  activityId,
  description
) {
  try {
    const response = await fetch(
      `https://www.strava.com/api/v3/activities/${activityId}`,
      {
        method: "PUT",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ description }),
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(
        `Erreur API Strava: ${errorData.message || response.statusText}`
      );
    }

    return true;
  } catch (error) {
    console.error(
      "Erreur lors de la mise √† jour de la description:",
      error.message
    );
    throw error;
  }
}

/**
 * Analyse une activit√© sp√©cifique
 */
export async function analyzeActivity(accessToken, activity) {
  try {
    // V√©rifier si l'activit√© est √† traiter (un fractionn√©)
    if (!shouldProcessActivity(activity)) {
      return {
        activity,
        success: true,
        message: `Activit√© "${activity.name}" ignor√©e - pas un fractionn√©`,
        processed: false,
      };
    }

    // R√©cup√©rer les d√©tails des laps (segments) de l'activit√©
    const laps = await getActivityLaps(accessToken, activity.id);

    // Analyser les donn√©es et cr√©er une nouvelle description
    const newDescription = generateWorkoutDescription(activity, laps);

    // Mettre √† jour la description de l'activit√©
    await updateActivityDescription(accessToken, activity.id, newDescription);

    // R√©cup√©rer l'activit√© mise √† jour avec la nouvelle description
    const updatedActivity = {
      ...activity,
      description: newDescription,
      analyzed: true,
    };

    return {
      activity: updatedActivity,
      success: true,
      message: `Activit√© "${activity.name}" mise √† jour avec succ√®s`,
      processed: true,
    };
  } catch (error) {
    console.error(
      `Erreur lors de l'analyse de l'activit√© ${activity.id}:`,
      error.message
    );
    return {
      activity,
      success: false,
      message: error.message,
      processed: false,
      error: error.message,
    };
  }
}

/**
 * Fonction principale pour analyser les activit√©s r√©centes
 * @param {number} count - Nombre d'activit√©s √† analyser
 */
export async function analyzeRecentActivities(count = 5) {
  try {
    console.log(
      `D√©marrage de l'analyse des ${count} activit√©s Strava les plus r√©centes`
    );

    // 1. R√©cup√©rer un access token valide
    const tokenData = await getAccessToken();

    // 2. R√©cup√©rer les activit√©s r√©centes
    const activities = await getRecentActivities(tokenData.access_token, count);

    if (!activities || activities.length === 0) {
      return {
        success: true,
        message: "Aucune activit√© r√©cente trouv√©e",
        activities: [],
      };
    }

    // 3. Analyser chaque activit√©
    const results = [];
    for (const activity of activities) {
      const result = await analyzeActivity(tokenData.access_token, activity);
      results.push(result);
    }

    // 4. Pr√©parer le r√©sultat
    const processed = results.filter((r) => r.processed).length;

    return {
      success: true,
      message: `Analyse termin√©e: ${processed} activit√©s trait√©es sur ${results.length}`,
      activities: results.map((r) => r.activity),
      details: results,
    };
  } catch (error) {
    console.error(
      "Erreur lors de l'analyse des activit√©s r√©centes:",
      error.message
    );

    return {
      success: false,
      message: error.message,
      activities: [],
    };
  }
}
